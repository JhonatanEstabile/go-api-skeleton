// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// IUser is an autogenerated mock type for the IUser type
type IUser struct {
	mock.Mock
}

type IUser_Expecter struct {
	mock *mock.Mock
}

func (_m *IUser) EXPECT() *IUser_Expecter {
	return &IUser_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: name, email
func (_m *IUser) CreateUser(name string, email string) (sql.Result, error) {
	ret := _m.Called(name, email)

	var r0 sql.Result
	if rf, ok := ret.Get(0).(func(string, string) sql.Result); ok {
		r0 = rf(name, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IUser_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type IUser_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//  - name string
//  - email string
func (_e *IUser_Expecter) CreateUser(name interface{}, email interface{}) *IUser_CreateUser_Call {
	return &IUser_CreateUser_Call{Call: _e.mock.On("CreateUser", name, email)}
}

func (_c *IUser_CreateUser_Call) Run(run func(name string, email string)) *IUser_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *IUser_CreateUser_Call) Return(_a0 sql.Result, _a1 error) *IUser_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewIUser interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUser creates a new instance of IUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUser(t mockConstructorTestingTNewIUser) *IUser {
	mock := &IUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
