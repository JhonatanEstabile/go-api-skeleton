// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	fiber "github.com/gofiber/fiber/v2"
	mock "github.com/stretchr/testify/mock"
)

// IBaseController is an autogenerated mock type for the IBaseController type
type IBaseController struct {
	mock.Mock
}

type IBaseController_Expecter struct {
	mock *mock.Mock
}

func (_m *IBaseController) EXPECT() *IBaseController_Expecter {
	return &IBaseController_Expecter{mock: &_m.Mock}
}

// GetData provides a mock function with given fields: _a0, _a1
func (_m *IBaseController) GetData(_a0 *fiber.Ctx, _a1 interface{}) []string {
	ret := _m.Called(_a0, _a1)

	var r0 []string
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, interface{}) []string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// IBaseController_GetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetData'
type IBaseController_GetData_Call struct {
	*mock.Call
}

// GetData is a helper method to define mock.On call
//   - _a0 *fiber.Ctx
//   - _a1 interface{}
func (_e *IBaseController_Expecter) GetData(_a0 interface{}, _a1 interface{}) *IBaseController_GetData_Call {
	return &IBaseController_GetData_Call{Call: _e.mock.On("GetData", _a0, _a1)}
}

func (_c *IBaseController_GetData_Call) Run(run func(_a0 *fiber.Ctx, _a1 interface{})) *IBaseController_GetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].(interface{}))
	})
	return _c
}

func (_c *IBaseController_GetData_Call) Return(_a0 []string) *IBaseController_GetData_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewIBaseController interface {
	mock.TestingT
	Cleanup(func())
}

// NewIBaseController creates a new instance of IBaseController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBaseController(t mockConstructorTestingTNewIBaseController) *IBaseController {
	mock := &IBaseController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
